// –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
const board = Array(9).fill(null);
let currentPlayer = 'X'; // X - –∏–≥—Ä–æ–∫, O - –∫–æ–º–ø—å—é—Ç–µ—Ä
let gameActive = true;

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const cells = document.querySelectorAll('.cell');
const statusDisplay = document.getElementById('status');
const resetButton = document.getElementById('reset-btn');
const playerScoreDisplay = document.getElementById('player-score');
const computerScoreDisplay = document.getElementById('computer-score');
const drawScoreDisplay = document.getElementById('draw-score');

// –°—á–µ—Ç –∏–≥—Ä—ã
let scores = {
    player: 0,
    computer: 0,
    draws: 0
};

// –í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
const winningCombinations = [
    [0, 1, 2], [3, 4, 5], [6, 7, 8], // –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ
    [0, 3, 6], [1, 4, 7], [2, 5, 8], // –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ
    [0, 4, 8], [2, 4, 6] // –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    board.fill(null);
    currentPlayer = 'X';
    gameActive = true;

    cells.forEach(cell => {
        cell.textContent = '';
        cell.classList.remove('x', 'o', 'filled', 'winner-animation');
    });

    updateStatusDisplay();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ
function handleCellClick(event) {
    const cell = event.target;
    const index = parseInt(cell.dataset.index);

    if (!gameActive || board[index] !== null) {
        return;
    }

    // –•–æ–¥ –∏–≥—Ä–æ–∫–∞
    makeMove(index, 'X');

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, —Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    if (gameActive) {
        setTimeout(() => {
            makeComputerMove();
        }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    }
}

// –°–æ–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞
function makeMove(index, player) {
    board[index] = player;
    const cell = cells[index];

    cell.textContent = player;
    cell.classList.add(player.toLowerCase(), 'filled');

    if (checkWinner(player)) {
        endGame(player === 'X' ? 'player' : 'computer');
        return;
    }

    if (checkDraw()) {
        endGame('draw');
        return;
    }

    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
    updateStatusDisplay();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
function checkWinner(player) {
    return winningCombinations.some(combination => {
        return combination.every(index => board[index] === player);
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏—á—å–∏
function checkDraw() {
    return board.every(cell => cell !== null);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
function endGame(result) {
    gameActive = false;

    if (result === 'player') {
        scores.player++;
        statusDisplay.textContent = 'üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!';
        highlightWinningCells('X');
    } else if (result === 'computer') {
        scores.computer++;
        statusDisplay.textContent = 'üíª –ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª!';
        highlightWinningCells('O');
    } else {
        scores.draws++;
        statusDisplay.textContent = 'ü§ù –ù–∏—á—å—è!';
        cells.forEach(cell => cell.classList.add('draw-animation'));
    }

    updateScoreDisplay();
}

// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
function highlightWinningCells(player) {
    const winningCombination = winningCombinations.find(combination => {
        return combination.every(index => board[index] === player);
    });

    if (winningCombination) {
        winningCombination.forEach(index => {
            cells[index].classList.add('winner-animation');
        });
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
function updateStatusDisplay() {
    if (currentPlayer === 'X') {
        statusDisplay.textContent = '–í–∞—à —Ö–æ–¥! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∫—Ä–µ—Å—Ç–∏–∫–∞–º–∏ (X)';
    } else {
        statusDisplay.textContent = '–•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
function updateScoreDisplay() {
    playerScoreDisplay.textContent = scores.player;
    computerScoreDisplay.textContent = scores.computer;
    drawScoreDisplay.textContent = scores.draws;
}

// –•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
function makeComputerMove() {
    if (!gameActive) return;

    const bestMove = getBestMove();

    if (bestMove !== null) {
        makeMove(bestMove, 'O');
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Ö–æ–¥–∞ –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
function getBestMove() {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–∏–≥—Ä–∞—Ç—å
    const winningMove = findWinningMove('O');
    if (winningMove !== null) {
        return winningMove;
    }

    // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –≤—ã–∏–≥—Ä–∞—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞
    const blockingMove = findWinningMove('X');
    if (blockingMove !== null) {
        return blockingMove;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ö–æ–¥–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
    return getRandomMove();
}

// –ü–æ–∏—Å–∫ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ —Ö–æ–¥–∞
function findWinningMove(player) {
    for (let i = 0; i < 9; i++) {
        if (board[i] === null) {
            // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ö–æ–¥
            board[i] = player;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤–µ–ª –ª–∏ —ç—Ç–æ—Ç —Ö–æ–¥ –∫ –ø–æ–±–µ–¥–µ
            if (checkWinner(player)) {
                // –û—Ç–º–µ–Ω—è–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
                board[i] = null;
                return i;
            }

            // –û—Ç–º–µ–Ω—è–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            board[i] = null;
        }
    }
    return null;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ö–æ–¥–∞
function getRandomMove() {
    const availableMoves = [];

    for (let i = 0; i < 9; i++) {
        if (board[i] === null) {
            availableMoves.push(i);
        }
    }

    if (availableMoves.length === 0) {
        return null;
    }

    const randomIndex = Math.floor(Math.random() * availableMoves.length);
    return availableMoves[randomIndex];
}

// –°–±—Ä–æ—Å –∏–≥—Ä—ã
function resetGame() {
    initGame();
}

// –°–æ–±—ã—Ç–∏—è
cells.forEach(cell => cell.addEventListener('click', handleCellClick));
resetButton.addEventListener('click', resetGame);

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
initGame();
